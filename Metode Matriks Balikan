def transpose(matrix):
    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]

def matrix_multiplication(matrix1, matrix2):
    return [[sum(a*b for a,b in zip(X_row,Y_col)) for Y_col in transpose(matrix2)] for X_row in matrix1]

def inverse_matrix_method(A, b):
    n = len(A)
    A_inv = [[0] * n for _ in range(n)]
    
    for i in range(n):
        A_inv[i][i] = 1
    
    for i in range(n):
        for j in range(i+1, n):
            ratio = A[j][i] / A[i][i]
            for k in range(n):
                A[j][k] -= ratio * A[i][k]
                A_inv[j][k] -= ratio * A_inv[i][k]
    
    for i in range(n):
        divisor = A[i][i]
        for j in range(n):
            A[i][j] /= divisor
            A_inv[i][j] /= divisor
    
    return matrix_multiplication(A_inv, [b])

A = [[2, 1, -1],
     [3, 2, 1],
     [1, 1, 1]]
b = [2, 3, 4]
x = inverse_matrix_method(A, b)
print("Solusi x:", x)
